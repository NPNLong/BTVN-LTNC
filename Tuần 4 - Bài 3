#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

bool is_palindrome(string s) {
    string p = s;
    reverse(p.begin(),p.end());
    if (p==s) return true;
    
    return false;
}

int palindromeIndex(string s) {
    if (is_palindrome(s)) {
        return -1;
    }

    int n = s.length();
    for (int i = 0; i < n/2; i++) {
        if (s[i] != s[n-1-i]){
            
        if (is_palindrome(s.substr(0, i) + s.substr(i + 1))) {
            return i;
        }
        
        else if (is_palindrome(s.substr(0, n-1-i) + s.substr(n-i))){
            return n-1-i;
        }
        
        }
    }
    return -1;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string s;
        getline(cin, s);

        int result = palindromeIndex(s);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
